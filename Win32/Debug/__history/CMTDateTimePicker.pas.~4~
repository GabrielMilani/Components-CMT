unit CMTDateTimePicker;

interface

uses
  System.SysUtils, System.Classes, Vcl.Controls, Vcl.ComCtrls;

type
  TCMTDateTimePicker = class(TDateTimePicker)
  private
    FIsEmpty: Boolean;
    FButton: TSpeedButton;
    procedure SetIsEmpty(const Value: Boolean);
    procedure DoButtonClick(Sender: TObject);
  protected
    procedure Loaded; override;
    procedure SetEnabled(Value: Boolean); override;
    procedure Resize; override;
    procedure CMEnter(var Message: TMessage); message CM_ENTER;
    procedure CMExit(var Message: TMessage); message CM_EXIT;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure Clear;
  published
    property IsEmpty: Boolean read FIsEmpty write SetIsEmpty;
    property Date;
    property Text;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('CMT', [TCMTDateTimePicker]);
end;

constructor TDateTimePickerEx.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  // Propriedades iniciais do componente
  FIsEmpty := True;

  // Criação do botão de "Clear"
  FButton := TSpeedButton.Create(Self);
  with FButton do
  begin
    Parent := Self;
    Width := 18;
    Height := Self.Height;
    Top := 0;
    Left := Self.Width - Width;
    Align := alRight;
    Flat := True;
    Hint := 'Limpar Data';
    ShowHint := True;
    Visible := False; // Inicialmente oculto
    OnClick := DoButtonClick;
    Caption := 'X'; // Ícone de fechar
  end;
end;

destructor TDateTimePickerEx.Destroy;
begin
  FButton.Free;
  inherited Destroy;
end;

procedure TDateTimePickerEx.Loaded;
begin
  inherited Loaded;
  Resize;
  SetIsEmpty(True);
end;

procedure TDateTimePickerEx.Resize;
begin
  inherited;
  if Assigned(FButton) then
    FButton.Left := Self.Width - FButton.Width - 1;
end;

procedure TDateTimePickerEx.SetEnabled(Value: Boolean);
begin
  inherited;
  if not Value and Assigned(FButton) then
    FButton.Visible := False;
end;

procedure TDateTimePickerEx.SetIsEmpty(const Value: Boolean);
begin
  if FIsEmpty <> Value then
  begin
    FIsEmpty := Value;
    if FIsEmpty then
    begin
      // Limpa a data interna e o texto, simulando o estado vazio
      inherited SetDate(0);
      Self.Text := '';
    end
    else
    begin
      // Se a data for selecionada, atualiza FIsEmpty
      inherited SetDate(Date);
    end;
  end;
  // Sincroniza a visibilidade do botão de "Clear"
  FButton.Visible := (not FIsEmpty) and Focused;
end;

procedure TDateTimePickerEx.DoButtonClick(Sender: TObject);
begin
  Clear;
  SetFocus;
end;

procedure TDateTimePickerEx.Clear;
begin
  IsEmpty := True;
end;

procedure TDateTimePickerEx.CMEnter(var Message: TMessage);
begin
  inherited;
  FButton.Visible := not FIsEmpty;
end;

procedure TDateTimePickerEx.CMExit(var Message: TMessage);
begin
  inherited;
  FButton.Visible := False;
end;

procedure Register;
begin
  RegisterComponents('Custom', [TDateTimePickerEx]);
end;

end.
