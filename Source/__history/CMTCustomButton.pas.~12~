unit CMTCustomButton;

interface

uses
  System.Classes, Vcl.Controls, Vcl.Graphics, Winapi.Windows, Winapi.Messages;

type
  TImagePosition = (ipLeft, ipRight, ipTop, ipBottom);

type
  TCMTCustomButton = class(TCustomControl)
  private
    FBaseColor: TColor;
    FHoverColor: TColor;
    FFontColor: TColor;
    FHoverFontColor: TColor;
    FCornerRadius: Integer;
    FHovering: Boolean;
    FImage: TPicture;
    FImagePosition: TImagePosition;
    FImageSpacing: Integer;
    FTextAlignment: TAlignment;

    procedure SetBaseColor(Value: TColor);
    procedure SetHoverColor(Value: TColor);
    procedure SetFontColor(Value: TColor);
    procedure SetHoverFontColor(Value: TColor);
    procedure SetCornerRadius(Value: Integer);
    procedure SetImage(Value: TPicture);
    procedure SetImagePosition(Value: TImagePosition);
    procedure SetImageSpacing(Value: Integer);

    procedure CMMouseEnter(var Message: TMessage); message CM_MOUSEENTER;
    procedure CMMouseLeave(var Message: TMessage); message CM_MOUSELEAVE;
    procedure SetTextAlignment(const Value: TAlignment);
  protected
    procedure Paint; override;
    procedure Resize; override;
    procedure Click; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  published
    property Caption;
    property Align;
    property Anchors;
    property Enabled;
    property Visible;
    property Font;
    property ParentFont;
    property ParentShowHint;
    property ShowHint;
    property TabOrder;
    property TabStop;
    property OnClick;

    property BaseColor: TColor read FBaseColor write SetBaseColor default clSkyBlue;
    property HoverColor: TColor read FHoverColor write SetHoverColor default clNavy;
    property FontColor: TColor read FFontColor write SetFontColor default clWhite;
    property HoverFontColor: TColor read FHoverFontColor write SetHoverFontColor default clWhite;
    property CornerRadius: Integer read FCornerRadius write SetCornerRadius default 10;

    property Image: TPicture read FImage write SetImage;
    property ImagePosition: TImagePosition read FImagePosition write SetImagePosition default ipLeft;
    property ImageSpacing: Integer read FImageSpacing write SetImageSpacing default 4;
    property TextAlignment: TAlignment read FTextAlignment write SetTextAlignment default taCenter;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('CMT', [TCMTCustomButton]);
end;

constructor TCMTCustomButton.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  ControlStyle := ControlStyle + [csOpaque, csCaptureMouse, csClickEvents, csDoubleClicks];
  DoubleBuffered := True;
  FTextAlignment := taCenter;

  Width := 120;
  Height := 40;

  FBaseColor := clSkyBlue;
  FHoverColor := clNavy;
  FFontColor := clWhite;
  FHoverFontColor := clWhite;
  FCornerRadius := 10;

  Font.Name := 'Segoe UI';
  Font.Size := 10;
  Cursor := crHandPoint;
  TabStop := True;

  FImage := TPicture.Create;
  FImagePosition := ipLeft;
  FImageSpacing := 4;
end;

destructor TCMTCustomButton.Destroy;
begin
  FImage.Free;
  inherited;
end;

procedure TCMTCustomButton.SetBaseColor(Value: TColor);
begin
  if FBaseColor <> Value then
  begin
    FBaseColor := Value;
    Invalidate;
  end;
end;

procedure TCMTCustomButton.SetHoverColor(Value: TColor);
begin
  if FHoverColor <> Value then
  begin
    FHoverColor := Value;
    Invalidate;
  end;
end;

procedure TCMTCustomButton.SetFontColor(Value: TColor);
begin
  if FFontColor <> Value then
  begin
    FFontColor := Value;
    Invalidate;
  end;
end;

procedure TCMTCustomButton.SetHoverFontColor(Value: TColor);
begin
  if FHoverFontColor <> Value then
  begin
    FHoverFontColor := Value;
    Invalidate;
  end;
end;

procedure TCMTCustomButton.SetCornerRadius(Value: Integer);
begin
  if FCornerRadius <> Value then
  begin
    FCornerRadius := Value;
    Invalidate;
  end;
end;

procedure TCMTCustomButton.SetImage(Value: TPicture);
begin
  FImage.Assign(Value);
  Invalidate;
end;

procedure TCMTCustomButton.SetImagePosition(Value: TImagePosition);
begin
  if FImagePosition <> Value then
  begin
    FImagePosition := Value;
    Invalidate;
  end;
end;

procedure TCMTCustomButton.SetImageSpacing(Value: Integer);
begin
  if FImageSpacing <> Value then
  begin
    FImageSpacing := Value;
    Invalidate;
  end;
end;

procedure TCMTCustomButton.SetTextAlignment(const Value: TAlignment);
begin
  if FTextAlignment <> Value then
  begin
    FTextAlignment := Value;
    Invalidate;
  end;
end;

procedure TCMTCustomButton.CMMouseEnter(var Message: TMessage);
begin
  inherited;
  FHovering := True;
  Invalidate;
end;

procedure TCMTCustomButton.CMMouseLeave(var Message: TMessage);
begin
  inherited;
  FHovering := False;
  Invalidate;
end;

procedure TCMTCustomButton.Paint;
var
  R, TextRect, ImgRect: TRect;
  BgColor, TxtColor: TColor;
  Flags: Longint;
  ImgW, ImgH: Integer;
begin
  inherited;

  R := ClientRect;

  if FHovering then
  begin
    BgColor := FHoverColor;
    TxtColor := FHoverFontColor;
  end
  else
  begin
    BgColor := FBaseColor;
    TxtColor := FFontColor;
  end;

  Canvas.Brush.Color := BgColor;
  Canvas.Pen.Style := psClear;
  Canvas.RoundRect(R.Left, R.Top, R.Right, R.Bottom, FCornerRadius, FCornerRadius);

  Canvas.Font.Assign(Font);
  Canvas.Font.Color := TxtColor;

  ImgW := 0;
  ImgH := 0;
  ImgRect := Rect(0, 0, 0, 0);
  TextRect := R;

  if Assigned(FImage.Graphic) and not FImage.Graphic.Empty then
  begin
    ImgW := FImage.Width;
    ImgH := FImage.Height;

    if Caption = '' then
    begin
      // Centraliza imagem no botão
      ImgRect.Left := (R.Width - ImgW) div 2;
      ImgRect.Top := (R.Height - ImgH) div 2;
      ImgRect.Right := ImgRect.Left + ImgW;
      ImgRect.Bottom := ImgRect.Top + ImgH;

      Canvas.Draw(ImgRect.Left, ImgRect.Top, FImage.Graphic);
      Exit; // Não desenha texto
    end;

    // Posicionamento da imagem com texto
    case FImagePosition of
      ipLeft:
        begin
          ImgRect.Left := R.Left + 8;
          ImgRect.Top := (R.Height - ImgH) div 2;
          ImgRect.Right := ImgRect.Left + ImgW;
          ImgRect.Bottom := ImgRect.Top + ImgH;
          TextRect.Left := ImgRect.Right + FImageSpacing;
        end;
      ipRight:
        begin
          ImgRect.Right := R.Right - 8;
          ImgRect.Top := (R.Height - ImgH) div 2;
          ImgRect.Left := ImgRect.Right - ImgW;
          ImgRect.Bottom := ImgRect.Top + ImgH;
          TextRect.Right := ImgRect.Left - FImageSpacing;
        end;
      ipTop:
        begin
          ImgRect.Top := R.Top + 4;
          ImgRect.Left := (R.Width - ImgW) div 2;
          ImgRect.Bottom := ImgRect.Top + ImgH;
          ImgRect.Right := ImgRect.Left + ImgW;
          TextRect.Top := ImgRect.Bottom + FImageSpacing;
        end;
      ipBottom:
        begin
          ImgRect.Bottom := R.Bottom - 4;
          ImgRect.Left := (R.Width - ImgW) div 2;
          ImgRect.Top := ImgRect.Bottom - ImgH;
          ImgRect.Right := ImgRect.Left + ImgW;
          TextRect.Bottom := ImgRect.Top - FImageSpacing;
        end;
    end;

    Canvas.Draw(ImgRect.Left, ImgRect.Top, FImage.Graphic);
  end;

  // Alinhamento do texto
  Flags := DT_VCENTER or DT_SINGLELINE;

  case FTextAlignment of
    taLeftJustify:  Flags := Flags or DT_LEFT;
    taCenter:       Flags := Flags or DT_CENTER;
    taRightJustify: Flags := Flags or DT_RIGHT;
  end;

  DrawText(Canvas.Handle, PChar(Caption), -1, TextRect, Flags);
end;
//var
//  R, TextRect, ImgRect: TRect;
//  BgColor, TxtColor: TColor;
//  Flags: Longint;
//  ImgW, ImgH: Integer;
//begin
//  inherited;
//
//  R := ClientRect;
//
//  if FHovering then
//  begin
//    BgColor := FHoverColor;
//    TxtColor := FHoverFontColor;
//  end
//  else
//  begin
//    BgColor := FBaseColor;
//    TxtColor := FFontColor;
//  end;
//
//  Canvas.Brush.Color := BgColor;
//  Canvas.Pen.Style := psClear;
//  Canvas.RoundRect(R.Left, R.Top, R.Right, R.Bottom, FCornerRadius, FCornerRadius);
//
//  Canvas.Font.Assign(Font);
//  Canvas.Font.Color := TxtColor;
//
//  TextRect := R;
//  ImgRect := Rect(0, 0, 0, 0);
//  ImgW := 0;
//  ImgH := 0;
//
//  if Assigned(FImage.Graphic) and not FImage.Graphic.Empty then
//  begin
//    ImgW := FImage.Width;
//    ImgH := FImage.Height;
//
//    case FImagePosition of
//      ipLeft:
//        begin
//          ImgRect.Left := R.Left + 8;
//          ImgRect.Top := (R.Height - ImgH) div 2;
//          ImgRect.Right := ImgRect.Left + ImgW;
//          ImgRect.Bottom := ImgRect.Top + ImgH;
//          TextRect.Left := ImgRect.Right + FImageSpacing;
//        end;
//      ipRight:
//        begin
//          ImgRect.Right := R.Right - 8;
//          ImgRect.Top := (R.Height - ImgH) div 2;
//          ImgRect.Left := ImgRect.Right - ImgW;
//          ImgRect.Bottom := ImgRect.Top + ImgH;
//          TextRect.Right := ImgRect.Left - FImageSpacing;
//        end;
//      ipTop:
//        begin
//          ImgRect.Top := R.Top + 4;
//          ImgRect.Left := (R.Width - ImgW) div 2;
//          ImgRect.Bottom := ImgRect.Top + ImgH;
//          ImgRect.Right := ImgRect.Left + ImgW;
//          TextRect.Top := ImgRect.Bottom + FImageSpacing;
//        end;
//      ipBottom:
//        begin
//          ImgRect.Bottom := R.Bottom - 4;
//          ImgRect.Left := (R.Width - ImgW) div 2;
//          ImgRect.Top := ImgRect.Bottom - ImgH;
//          ImgRect.Right := ImgRect.Left + ImgW;
//          TextRect.Bottom := ImgRect.Top - FImageSpacing;
//        end;
//    end;
//
//    Canvas.Draw(ImgRect.Left, ImgRect.Top, FImage.Graphic);
//  end;
//
//  // Alinhamento do texto
//  Flags := DT_VCENTER or DT_SINGLELINE;
//
//  case FTextAlignment of
//    taLeftJustify:  Flags := Flags or DT_LEFT;
//    taCenter:       Flags := Flags or DT_CENTER;
//    taRightJustify: Flags := Flags or DT_RIGHT;
//  end;
//
//  DrawText(Canvas.Handle, PChar(Caption), -1, TextRect, Flags);
//end;

procedure TCMTCustomButton.Resize;
begin
  inherited;
  Invalidate;
end;

procedure TCMTCustomButton.Click;
begin
  inherited;
end;

end.
