unit CMTDBGrid;

interface

uses
  System.SysUtils, System.Classes, Vcl.Controls, Vcl.Grids, Vcl.DBGrids,
  Winapi.Windows, Vcl.Forms, Vcl.Graphics, Data.DB, Math;

type
  TCMTDBGrid = class(TDBGrid)
  private
    FAutoSizeColumns: Boolean;
    FFixedColumnNames: TStrings;
    procedure SetAutoSizeColumns(const Value: Boolean);
    procedure AdjustColumnWidths;
    procedure SetFixedColumnNames(const Value: TStrings);
  protected
    procedure DrawColumnCell(const Rect: TRect; DataCol: Integer;
      Column: TColumn; State: TGridDrawState); override;
    procedure Loaded; override;
    procedure Resize; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor destroy; override;
  published
    property AutoSizeColumns: Boolean read FAutoSizeColumns write SetAutoSizeColumns default False;
    property FixedColumnNames: TStrings read FFixedColumnNames write SetFixedColumnNames;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('CMT', [TCMTDBGrid]);
end;

constructor TCMTDBGrid.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FFixedColumnNames := TStringList.Create;
  // Estilo visual
  BorderStyle := bsNone;
  DrawingStyle := gdsClassic;

  // Fonte padrão
  Font.Name := 'Segoe UI';
  Font.Size := 9;
  Font.Style := [fsBold];

  // Título das colunas
  TitleFont.Name := 'Segoe UI';
  TitleFont.Size := 9;
  TitleFont.Style := [fsBold];
  TitleFont.Color := clWhite;

  // Cor de fundo fixa (convertido de $00676767)
  FixedColor := TColor($00676767);

  // Opções do grid
  Options := [
    dgTitles,
    dgColumnResize,
    dgColLines,
    dgTabs,
    dgRowSelect,
    dgAlwaysShowSelection,
    dgConfirmDelete,
    dgCancelOnExit,
    dgTitleClick,
    dgTitleHotTrack
  ];

  // Estilo visual adicional
  Ctl3D := False;
  ParentCtl3D := False;
  GridLineWidth := 1;
  Color := clWhite;

  FAutoSizeColumns := False;
end;

destructor TCMTDBGrid.destroy;
begin
  FFixedColumnNames.Free;
  inherited;
end;

procedure TCMTDBGrid.SetAutoSizeColumns(const Value: Boolean);
begin
  if FAutoSizeColumns <> Value then
  begin
    FAutoSizeColumns := Value;
    if FAutoSizeColumns then
      AdjustColumnWidths;
  end;
end;

procedure TCMTDBGrid.SetFixedColumnNames(const Value: TStrings);
begin
  FFixedColumnNames := Value;
end;

procedure TCMTDBGrid.AdjustColumnWidths;
var
  i, TotalWidth, GridUsableWidth, ExtraWidth, FlexCount: Integer;
  BaseWidths: array of Integer;
  CellText: string;
begin
  if Columns.Count = 0 then Exit;

  GridUsableWidth := ClientWidth - 2;
  if dgColLines in Options then
    Dec(GridUsableWidth, GridLineWidth * Columns.Count);

  SetLength(BaseWidths, Columns.Count);
  TotalWidth := 0;
  FlexCount := 0;

  // Calcula largura base e soma apenas colunas flexíveis
  for i := 0 to Columns.Count - 1 do
  begin
    if FFixedColumnNames.IndexOf(Columns[i].FieldName) <> -1 then
    begin
      Dec(GridUsableWidth, Columns[i].Width); // reserva espaço fixo
      Continue;
    end;

    Canvas.Font.Assign(TitleFont);
    BaseWidths[i] := Canvas.TextWidth(Columns[i].Title.Caption + '  ');

    Canvas.Font.Assign(Font);
    if Assigned(Columns[i].Field) then
      CellText := Columns[i].Field.DisplayText
    else
      CellText := '';

    BaseWidths[i] := Max(BaseWidths[i], Canvas.TextWidth(CellText + '  ')) + 8;
    Inc(TotalWidth, BaseWidths[i]);
    Inc(FlexCount);
  end;

  if (TotalWidth <= 0) or (FlexCount = 0) then Exit;

  // Redimensiona proporcionalmente apenas colunas flexíveis
  for i := 0 to Columns.Count - 1 do
    if FFixedColumnNames.IndexOf(Columns[i].FieldName) = -1 then
      Columns[i].Width := MulDiv(BaseWidths[i], GridUsableWidth, TotalWidth);

  // Distribui pixels restantes
  ExtraWidth := GridUsableWidth;
  for i := 0 to Columns.Count - 1 do
    if FFixedColumnNames.IndexOf(Columns[i].FieldName) = -1 then
      Dec(ExtraWidth, Columns[i].Width);

  i := 0;
  while ExtraWidth > 0 do
  begin
    if FFixedColumnNames.IndexOf(Columns[i].FieldName) = -1 then
    begin
      Columns[i].Width := Columns[i].Width + 1;
      Dec(ExtraWidth);
    end;
    Inc(i);
    if i >= Columns.Count then i := 0;
  end;
end;

procedure TCMTDBGrid.Loaded;
begin
  inherited;
  if FAutoSizeColumns then
    AdjustColumnWidths;
end;

procedure TCMTDBGrid.Resize;
begin
  inherited;
  if FAutoSizeColumns then
    AdjustColumnWidths;
end;

procedure TCMTDBGrid.DrawColumnCell(const Rect: TRect; DataCol: Integer;
  Column: TColumn; State: TGridDrawState);
var
  RecNo: Integer;
begin
  inherited;
  if Assigned(DataSource) and Assigned(DataSource.DataSet) then
    RecNo := DataSource.DataSet.RecNo
  else
    RecNo := 0;

  // Alternância de cor de fundo
  if Odd(RecNo) then
    Canvas.Brush.Color := $00E9E9E9
  else
    Canvas.Brush.Color := clWhite;

  // Estilo de seleção
  if gdSelected in State then
  begin
    Canvas.Brush.Color := clSkyBlue;
    Canvas.Font.Color := clWhite;
    Canvas.Font.Style := [fsBold];
  end
  else
  begin
    Canvas.Font.Color := Font.Color;
    Canvas.Font.Style := Font.Style;
  end;

  // Desenho da célula
  Canvas.FillRect(Rect);
  DefaultDrawColumnCell(Rect, DataCol, Column, State);
end;

end.
