unit CMTCalendarEdit;

interface

uses
  System.Classes, System.SysUtils, Vcl.Controls, Vcl.StdCtrls, Vcl.ComCtrls,
  Vcl.Graphics, CMTCustomButton, Windows, Messages, Vcl.Dialogs, Vcl.Mask,
  Vcl.Forms;

type
  TCMTCalendarEdit = class(TWinControl)
unit CMTCalendarEdit;

interface

uses
  System.Classes, System.SysUtils, Vcl.Controls, Vcl.StdCtrls, Vcl.ComCtrls,
  Vcl.Graphics, Vcl.Dialogs, CMTCustomButton, Windows, Messages;

type
  TCMTCalendarEdit = class(TWinControl)
  private
    FEdit: TMaskEdit;
    FButton: TCMTCustomButton;
    FCalendar: TMonthCalendar;

    procedure ButtonClick(Sender: TObject);
    procedure CalendarDateSelected(Sender: TObject);
    procedure ResizeControls;
    procedure LoadCalendarImage;
    procedure AjustarVerticalDoEdit(Edit: TMaskEdit);

    function GetText: string;
    procedure SetText(const Value: string);
    function GetDate: TDateTime;
    procedure SetDate(const Value: TDateTime);

    // Exposição de propriedades do botão
    function GetButtonBaseColor: TColor;
    procedure SetButtonBaseColor(const Value: TColor);
    function GetButtonHoverColor: TColor;
    procedure SetButtonHoverColor(const Value: TColor);
    function GetButtonCornerRadius: Integer;
    procedure SetButtonCornerRadius(const Value: Integer);
  protected
    procedure Resize; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

    property Date: TDateTime read GetDate write SetDate;
    property Text: string read GetText write SetText;
  published
    property Align;
    property Anchors;
    property Enabled;
    property Visible;

    // Propriedades visuais do botão expostas no Object Inspector
    property ButtonBaseColor: TColor read GetButtonBaseColor write SetButtonBaseColor;
    property ButtonHoverColor: TColor read GetButtonHoverColor write SetButtonHoverColor;
    property ButtonCornerRadius: Integer read GetButtonCornerRadius write SetButtonCornerRadius;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('CMT', [TCMTCalendarEdit]);
end;

{ TCMTCalendarEdit }

constructor TCMTCalendarEdit.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  Width := 200;
  Height := 24;

  // Campo de data
  FEdit := TMaskEdit.Create(Self);
  FEdit.Parent := Self;
  FEdit.EditMask := '99/99/9999;1;_';
  FEdit.Text := '';
  FEdit.BorderStyle := bsNone;
  FEdit.SetBounds(0, 0, Width - 30, Height);

  // Botão estilizado
  FButton := TCMTCustomButton.Create(Self);
  FButton.Parent := Self;
  FButton.Caption := '';
  FButton.SetBounds(Width - 30, 0, 30, Height);
  FButton.OnClick := ButtonClick;
  LoadCalendarImage;

  // Calendário invisível em tempo de design
  FCalendar := TMonthCalendar.Create(nil);
  FCalendar.Visible := False;
  FCalendar.OnClick := CalendarDateSelected;
end;

destructor TCMTCalendarEdit.Destroy;
begin
  FCalendar.Free;
  inherited;
end;

procedure TCMTCalendarEdit.LoadCalendarImage;
var
  ImagePath: string;
begin
  // Caminho relativo ao executável
  ImagePath := ExtractFilePath(ParamStr(0)) + 'image\calendar.png';
  if FileExists(ImagePath) then
    FButton.Image.LoadFromFile(ImagePath)
  else
    ShowMessage('Imagem não encontrada: ' + ImagePath);
end;

procedure TCMTCalendarEdit.ButtonClick(Sender: TObject);
var
  P: TPoint;
begin
  P := ClientToScreen(Point(0, Height));
  FCalendar.Parent := GetParentForm(Self); // Define Parent apenas em execução
  FCalendar.Left := P.X;
  FCalendar.Top := P.Y;
  FCalendar.Visible := True;
  FCalendar.BringToFront;
end;

procedure TCMTCalendarEdit.CalendarDateSelected(Sender: TObject);
begin
  FEdit.Text := FormatDateTime('dd/mm/yyyy', FCalendar.Date);
  FCalendar.Visible := False;
end;

procedure TCMTCalendarEdit.Resize;
begin
  inherited;
  ResizeControls;
end;

procedure TCMTCalendarEdit.ResizeControls;
begin
  FEdit.Width := Width - FButton.Width;
  FButton.Left := Width - FButton.Width;
  FEdit.Height := Height;
  FButton.Height := Height;
end;

function TCMTCalendarEdit.GetDate: TDateTime;
begin
  try
    Result := StrToDate(FEdit.Text);
  except
    Result := 0;
  end;
end;

function TCMTCalendarEdit.GetText: string;
begin
  Result := FEdit.Text;
end;

procedure TCMTCalendarEdit.SetDate(const Value: TDateTime);
begin
  FEdit.Text := FormatDateTime('dd/mm/yyyy', Value);
end;

procedure TCMTCalendarEdit.SetText(const Value: string);
begin
  FEdit.Text := Value;
end;

end.

