unit CMTDateTimePicker;

interface

uses
  System.SysUtils, System.Classes, Vcl.Controls, Vcl.StdCtrls, Vcl.ExtCtrls,
  Vcl.Forms, Vcl.Graphics, Vcl.ComCtrls, Vcl.Mask, System.Types,
  CMTCustomButton;

type
  TCMTDateEdit = class(TCustomPanel)
  private
    FEdit: TMaskEdit;
    FButton: TCMTCustomButton;
    FPopupCalendar: TMonthCalendar;
    FPopupForm: TForm;
    FEditColor: TColor;
    FButtonColor: TColor;

    function GetDate: TDateTime;
    procedure SetDate(const Value: TDateTime);
    function GetText: string;
    procedure SetText(const Value: string);
    function IsDateValid: Boolean;
    procedure ShowCalendar(Sender: TObject);
    procedure CalendarDateSelected(Sender: TObject);
    procedure CalendarClosed(Sender: TObject);
    procedure SetEditColor(const Value: TColor);
    procedure SetButtonColor(const Value: TColor);
    procedure SetButtonHoverColor(const Value: TColor);
    procedure SetButtonFontColor(const Value: TColor);
    procedure SetEditFontColor(const Value: TColor);
    function GetEditFont: TFont;
    procedure SetEditFont(const Value: TFont);
  protected
    procedure Resize; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  published
    property Date: TDateTime read GetDate write SetDate;
    property Text: string read GetText write SetText;
    property IsValid: Boolean read IsDateValid;
    property EditColor: TColor read FEditColor write SetEditColor;
    property EditFont: TFont read GetEditFont write SetEditFont;
    property EditFontColor: TColor write SetEditFontColor;
    property ButtonColor: TColor read FButtonColor write SetButtonColor;
    property ButtonHoverColor: TColor write SetButtonHoverColor;
    property ButtonFontColor: TColor write SetButtonFontColor;
    property Button: TCMTCustomButton read FButton;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('CMT', [TCMTDateEdit]);
end;

{ TCMTDateEdit }

constructor TCMTDateEdit.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  Width := 160;
  Height := 24;
  BevelOuter := bvNone;

  // Campo de edição
  FEdit := TMaskEdit.Create(Self);
  FEdit.Parent := Self;
  FEdit.EditMask := '99/99/9999';
  FEdit.Align := alClient;
  FEdit.Text := '';
  FEdit.TabStop := True;
  FEdit.Ctl3D := False;
  FEdit.BorderStyle := bsNone;
  FEditColor := clWindow;
  FEdit.Color := FEditColor;

  // Botão de calendário usando seu componente
  FButton := TCMTCustomButton.Create(Self);
  FButton.Parent := Self;
  FButton.Align := alRight;
  FButton.Caption := '▼';
  FButton.Width := 24;
  FButton.BaseColor := clSkyBlue;
  FButton.HoverColor := clNavy;
  FButton.FontColor := clWhite;
  FButton.HoverFontColor := clWhite;
  FButton.CornerRadius := 0;
  FButton.OnClick := ShowCalendar;
  FButtonColor := FButton.BaseColor;

  // Formulário pop-up com calendário
  FPopupForm := TForm.Create(nil);
  FPopupForm.BorderStyle := bsNone;
  FPopupForm.Position := poDesigned;
  FPopupForm.ClientWidth := 220;
  FPopupForm.ClientHeight := 190;
  FPopupForm.OnDeactivate := CalendarClosed;

  FPopupCalendar := TMonthCalendar.Create(FPopupForm);
  FPopupCalendar.Parent := FPopupForm;
  FPopupCalendar.Align := alClient;
  FPopupCalendar.MultiSelect := False;
  FPopupCalendar.OnClick := CalendarDateSelected;
  FPopupCalendar.OnExit := CalendarClosed;
end;

destructor TCMTDateEdit.Destroy;
begin
  FPopupForm.Free;
  inherited;
end;

procedure TCMTDateEdit.ShowCalendar(Sender: TObject);
var
  P: TPoint;
begin
  P := ClientToScreen(Point(0, Height));
  FPopupForm.Left := P.X;
  FPopupForm.Top := P.Y;
  FPopupCalendar.Date := Now;
  FPopupForm.Show;
  FPopupCalendar.SetFocus;
end;

procedure TCMTDateEdit.CalendarDateSelected(Sender: TObject);
begin
  FEdit.Text := FormatDateTime('dd/mm/yyyy', FPopupCalendar.Date);
  FPopupForm.Hide;
end;

procedure TCMTDateEdit.CalendarClosed(Sender: TObject);
begin
  if Assigned(FPopupForm) then
    FPopupForm.Hide;
end;

function TCMTDateEdit.GetDate: TDateTime;
begin
  if not TryStrToDate(FEdit.Text, Result) then
    Result := 0;
end;

procedure TCMTDateEdit.SetDate(const Value: TDateTime);
begin
  if Value = 0 then
    FEdit.Text := ''
  else
    FEdit.Text := FormatDateTime('dd/mm/yyyy', Value);
end;

function TCMTDateEdit.GetText: string;
begin
  Result := FEdit.Text;
end;

procedure TCMTDateEdit.SetText(const Value: string);
begin
  FEdit.Text := Value;
end;

function TCMTDateEdit.IsDateValid: Boolean;
var
  Dummy: TDateTime;
begin
  Result := (Trim(FEdit.Text) <> '') and TryStrToDate(FEdit.Text, Dummy);
end;

procedure TCMTDateEdit.SetEditColor(const Value: TColor);
begin
  FEditColor := Value;
  FEdit.Color := Value;
end;

procedure TCMTDateEdit.SetButtonColor(const Value: TColor);
begin
  FButtonColor := Value;
  FButton.BaseColor := Value;
end;

procedure TCMTDateEdit.SetButtonHoverColor(const Value: TColor);
begin
  FButton.HoverColor := Value;
end;

procedure TCMTDateEdit.SetButtonFontColor(const Value: TColor);
begin
  FButton.FontColor := Value;
end;

procedure TCMTDateEdit.SetEditFontColor(const Value: TColor);
begin
  FEdit.Font.Color := Value;
end;

function TCMTDateEdit.GetEditFont: TFont;
begin
  Result := FEdit.Font;
end;

procedure TCMTDateEdit.SetEditFont(const Value: TFont);
begin
  FEdit.Font.Assign(Value);
end;

procedure TCMTDateEdit.Resize;
begin
  inherited;
  if Assigned(FButton) then
    FButton.Height := Height;
end;

end.
